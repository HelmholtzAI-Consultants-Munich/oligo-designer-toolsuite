from oligo_designer_toolsuite.pipelines import  (
    TargetProbes,
    ReadoutProbes,
    PrimerProbes
)
from oligo_designer_toolsuite.oligo_specificity_filter import (
    SpecificityFilter,
    Blastn,
)
from oligo_designer_toolsuite.database import CustomGenomicRegionGenerator, NcbiGenomicRegionGenerator, EnsemblGenomicRegionGenerator
from oligo_designer_toolsuite.database import ReferenceDatabase
from ._merfish_code_book import get_binary_sequences
import numpy as np
from Bio.Seq import Seq
import yaml
import os

class MerfishProbeDesigner:
    """
    This class is used to design the final merfish probes.
    """

    def __init__(
        self,
        config_file

    ):
        """Constructor method"""

        # set parameters
        self.config_file= config_file
        with open(self.config_file, 'r') as yaml_file:
            self.config = yaml.safe_load(yaml_file)
        self.dir_output = os.path.join(os.path.dirname(os.getcwd()), self.config["dir_output"]) 
       

        #Create the transcriptome file
        # If the custom config file is selected
        if self.config["source"] == "custom":
            self.region_generator = CustomGenomicRegionGenerator(
                annotation_file=self.config["annotation_file"], 
                sequence_file=self.config["sequence_file"], 
                files_source=self.config["files_source"], 
                species=self.config["species"], 
                annotation_release=self.config["annotation_release"], 
                genome_assembly=self.config["genome_assembly"],
                dir_output=self.dir_output
            )
        # If the Ncbi config file is selected
        elif self.config["source"] == "ncbi":
            self.region_generator = NcbiGenomicRegionGenerator(
                taxon=self.config["taxon"],
                species=self.config["species"], 
                annotation_release=self.config["annotation_release"], 
                dir_output=self.dir_output
            )
        # If the Ensembl config file is generated
        elif self.config["source"] == "ensembl":
            self.region_generator = EnsemblGenomicRegionGenerator(
                species=self.config["species"], 
                annotation_release=self.config["annotation_release"], 
                dir_output=self.dir_output
            )

        self.file_transcriptome = self.region_generator.generate_transcript_reduced_representation(include_exon_junctions=True, exon_junction_size=2*self.config["oligo_length_max"])


    def design_merfish_probes(
        self):
        # create target sequences
        target_probe_class = TargetProbes(self.config,
            self.dir_output,
            self.file_transcriptome,
            self.region_generator)
        target_probes, file_target_probes= target_probe_class.create_target()


        # create readout probes
        readouts = ReadoutProbes(self.config_file)
        if (self.config["use_default_readouts"]):
            readout_probes = readouts.get_default_readouts()
            
        else:
            readout_probes=readouts.create_readouts()
        #Create readout_sequences: reverse complement of the readout probes
        readout_sequences = np.zeros_like(readout_probes)
        for i, seq in enumerate (readout_probes):
             readout_sequences[i]=str(Seq(seq).reverse_complement())

        # create primer sequences 
        #primer_probes = PrimerProbes(self.config_file)
        #primer1 = primer_probes.create_primer1()
        #primer2 = primer_probes.create_primer2()

        # generate codebook for the genes
        database = target_probes.database
        genes = list(database.keys())
        code=get_binary_sequences(n_seq=len(genes))

        #assemble the probes
        for gene_idx, gene in enumerate(genes):
            gene_code = np.asarray(list(code[gene_idx]))
            ones = np.where(gene_code=='1')[0]#find 1s in the code
            oligo_ids = list(database[gene].keys())
            for oligo_id_idx, oligo_id in enumerate(oligo_ids):
                # randomly choose 2 1s from the code to be readout probes for this oligo
                readout_idx=np.random.choice(ones,2,replace=False)
                readout_seq_1= readout_sequences[readout_idx[0]]
                readout_seq_2= readout_sequences[readout_idx[1]]

                #target sequence is the reverse complement of the target probe
                target_mRNA= database[gene][oligo_id]["sequence"]
                target_sequence = str(target_mRNA.reverse_complement())

                #place readout sequences on either side of the targeting sequence
                encoding_probe = readout_seq_1 + target_sequence + readout_seq_2

                #add primers

                #put assembled probe in the database
                target_probes.database[gene][oligo_id]["sequence"]= Seq(encoding_probe)
                
        #save assembled probes in a file        
        assembled_probes_file_database = target_probes.write_database(filename="merfish_assembled_probes.txt")


        #blast against highly expressed genes
        reference_database = ReferenceDatabase(
            file_fasta = self.file_transcriptome,
            files_source = self.region_generator.files_source,
            species = self.region_generator.species,
            annotation_release = self.region_generator.annotation_release,
            genome_assembly = self.region_generator.genome_assembly,
            dir_output=self.dir_output
        )
        reference_database.load_fasta_into_database()
        if self.config["probe_setup"]["file_highly_expressed_genes"] is None:
            warnings.warn(
                "No file containing the highly expressed genes was provided, all the genes be used."
            )
            genes = None
        else:
            with open(self.config["probe_setup"]["file_highly_expressed_genes"]) as handle:
                lines = handle.readlines()
                genes = [line.rstrip() for line in lines]
            reference_database.filter_database(genes)
            
        dir_specificity = os.path.join(self.dir_output, "specificity_temporary") 
        blastn = Blastn(
            dir_specificity=dir_specificity, 
            word_size=self.config["probe_setup"]["blast2_word_size"],
            percent_identity=self.config["percent_identity"],
            coverage=self.config["coverage"],
            strand=self.config["strand"],
        )
        specificity_filter = SpecificityFilter(filters=[blastn], write_regions_with_insufficient_oligos=self.config["write_removed_genes"])
        # filter the database
        assembled_probes = specificity_filter.apply(oligo_database=target_probes, reference_database=reference_database, n_jobs=self.config["n_jobs"])

        #save final probes in a file        
        final_probes_file_database = target_probes.write_database(filename="merfish_final_probes.txt")



           







    